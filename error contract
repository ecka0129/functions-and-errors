// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PrepaidCardWithErrorHandling {
    address public owner;
    mapping(address => uint256) private cardBalances;
    mapping(address => uint256) private borrowedAmounts;

    uint256 public maxBorrowAmount = 500 wei;  // Set maximum borrow amount to 500 wei

    event FundsLoaded(address indexed user, uint256 amount);
    event PaymentMade(address indexed user, uint256 amount);
    event BalanceTransferred(address indexed from, address indexed to, uint256 amount);
    event Borrowed(address indexed user, uint256 amount);
    event Repaid(address indexed user, uint256 amount);
    event ErrorOccurred(string message);

    modifier onlyOwner() {
        if (msg.sender != owner) {
            emit ErrorOccurred("Caller is not the owner");
            revert("Caller is not the owner");
        }
        _;
    }

    modifier hasSufficientBalance(address _user, uint256 _amount) {
        if (cardBalances[_user] < _amount) {
            emit ErrorOccurred("Insufficient balance");
            revert("Insufficient balance");
        }
        _;
    }

    modifier withinBorrowLimit(uint256 _amount) {
        if (_amount <= 0 || _amount > maxBorrowAmount) {
            emit ErrorOccurred("Borrow amount out of bounds");
            revert("Borrow amount out of bounds");
        }
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function loadFunds(address _user, uint256 _amount) external onlyOwner {
        if (_amount <= 0) {
            emit ErrorOccurred("Amount must be greater than 0");
            revert("Amount must be greater than 0");
        }
        
        cardBalances[_user] += _amount;
        emit FundsLoaded(_user, _amount);
    }

    function checkBalance() external view returns (uint256) {
        return cardBalances[msg.sender];
    }

    function makePayment(uint256 _amount) external hasSufficientBalance(msg.sender, _amount) {
        if (_amount <= 0) {
            emit ErrorOccurred("Amount must be greater than 0");
            revert("Amount must be greater than 0");
        }

        cardBalances[msg.sender] -= _amount;
        emit PaymentMade(msg.sender, _amount);
    }

    function transferBalance(address _to, uint256 _amount) external hasSufficientBalance(msg.sender, _amount) {
        if (_to == address(0)) {
            emit ErrorOccurred("Cannot transfer to zero address");
            revert("Cannot transfer to zero address");
        }
        if (_amount <= 0) {
            emit ErrorOccurred("Amount must be greater than 0");
            revert("Amount must be greater than 0");
        }

        cardBalances[msg.sender] -= _amount;
        cardBalances[_to] += _amount;
        emit BalanceTransferred(msg.sender, _to, _amount);
    }

    function borrow(uint256 _amount) external withinBorrowLimit(_amount) {
        if (borrowedAmounts[msg.sender] != 0) {
            emit ErrorOccurred("Outstanding borrow balance exists");
            revert("Outstanding borrow balance exists");
        }

        borrowedAmounts[msg.sender] = _amount;
        cardBalances[msg.sender] += _amount;
        emit Borrowed(msg.sender, _amount);
    }

    function repay(uint256 _amount) external hasSufficientBalance(msg.sender, _amount) {
        if (borrowedAmounts[msg.sender] == 0) {
            emit ErrorOccurred("No borrowed amount to repay");
            revert("No borrowed amount to repay");
        }
        if (_amount > borrowedAmounts[msg.sender]) {
            emit ErrorOccurred("Repay amount exceeds borrowed amount");
            revert("Repay amount exceeds borrowed amount");
        }

        cardBalances[msg.sender] -= _amount;
        borrowedAmounts[msg.sender] -= _amount;

        emit Repaid(msg.sender, _amount);
    }

    function getBalance(address _user) external view returns (uint256) {
        if (msg.sender != owner) {
            revert("Caller is not the owner");
        }
        return cardBalances[_user];
    }

    receive() external payable {
        emit ErrorOccurred("Prepaid card contract does not accept direct payments");
        revert("Prepaid card contract does not accept direct payments");
    }

    function assertInvariants() internal view {
        assert(cardBalances[owner] >= 0); 
    }
}
